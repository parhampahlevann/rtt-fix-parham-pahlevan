#!/bin/bash

# Global Configuration
SCRIPT_NAME="BBR VIP Optimizer Pro"
SCRIPT_VERSION="4.2"
AUTHOR="Parham Pahlevan"
CONFIG_FILE="/etc/bbr_vip.conf"
LOG_FILE="/var/log/bbr_vip.log"
SYSCTL_BACKUP="/etc/sysctl.conf.bak"
CRON_JOB_FILE="/etc/cron.d/bbr_vip_autoreset"
NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
VIP_MODE=false
VIP_SUBNET=""
VIP_GATEWAY=""
DEFAULT_MTU=1420
CURRENT_MTU=$(cat /sys/class/net/$NETWORK_INTERFACE/mtu 2>/dev/null || echo $DEFAULT_MTU)
DNS_SERVERS=("1.1.1.1" "1.0.0.1")  # Default Cloudflare DNS
CURRENT_DNS=$(grep nameserver /etc/resolv.conf 2>/dev/null | awk '{print $2}' | tr '\n' ' ')
OS=""
VER=""

# Initialize logging
exec > >(tee -a "$LOG_FILE") 2>&1

# Color Codes
RED='\033[0;31m'
BOLD_RED='\033[1;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'
BOLD='\033[1m'

# Header Display
show_header() {
    clear
    echo -e "${BLUE}${BOLD}========================================================"
    echo -e "   ${SCRIPT_NAME} ${SCRIPT_VERSION} - ${AUTHOR}"
    echo -e "========================================================${NC}"
    echo -e "${YELLOW}Network Interface: ${BOLD}$NETWORK_INTERFACE${NC}"
    echo -e "${YELLOW}VIP Mode: ${BOLD}$([ "$VIP_MODE" = true ] && echo "Enabled" || echo "Disabled")${NC}"
    echo -e "${YELLOW}Current MTU: ${BOLD}$CURRENT_MTU${NC}"
    echo -e "${YELLOW}Current DNS: ${BOLD}$CURRENT_DNS${NC}"
    echo -e "${YELLOW}OS Detected: ${BOLD}$OS $VER${NC}\n"
}

# Check Root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${BOLD_RED}Error: This script must be run as root!${NC}"
        exit 1
    fi
}

# Detect Distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
        OS=$(lsb_release -si)
        VER=$(lsb_release -sr)
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    elif [ -f /etc/debian_version ]; then
        OS=Debian
        VER=$(cat /etc/debian_version)
    else
        OS=$(uname -s)
        VER=$(uname -r)
    fi
}

# Update DNS Configuration - Improved Version
update_dns() {
    echo -e "${YELLOW}Updating DNS configuration...${NC}"
    
    # Remove immutable attribute if exists
    if [ -f /etc/resolv.conf ]; then
        chattr -i /etc/resolv.conf 2>/dev/null
    fi

    # For Debian/Ubuntu systems with resolvconf
    if [ -x "$(command -v resolvconf)" ]; then
        echo "# Generated by $SCRIPT_NAME" > /etc/resolvconf/resolv.conf.d/head
        for dns in "${DNS_SERVERS[@]}"; do
            echo "nameserver $dns" >> /etc/resolvconf/resolv.conf.d/head
        done
        resolvconf -u
    else
        # For other systems, create static resolv.conf
        echo "# Generated by $SCRIPT_NAME" > /etc/resolv.conf
        for dns in "${DNS_SERVERS[@]}"; do
            echo "nameserver $dns" >> /etc/resolv.conf
        done
        # Make file immutable to prevent overwriting (if supported)
        chattr +i /etc/resolv.conf 2>/dev/null
    fi
    
    # Update current DNS display
    CURRENT_DNS="${DNS_SERVERS[@]}"
    echo -e "${GREEN}DNS servers updated to: ${BOLD}${DNS_SERVERS[@]}${NC}"
}

# Load Configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        # Apply the loaded DNS settings
        update_dns
    else
        # Default values
        ENABLE_BBR=true
        ENABLE_FASTOPEN=true
        TCP_CONGESTION="bbr"
        TCP_FASTOPEN=3
        VIP_MODE=false
        VIP_SUBNET=""
        VIP_GATEWAY=""
        DEFAULT_MTU=1420
        CURRENT_MTU=1420
        
        # Apply default MTU
        ifconfig $NETWORK_INTERFACE mtu $DEFAULT_MTU 2>/dev/null
        
        # Apply default DNS
        update_dns
        
        save_config
    fi
}

# Backup current sysctl settings
backup_sysctl() {
    if [[ ! -f "$SYSCTL_BACKUP" ]]; then
        cp /etc/sysctl.conf "$SYSCTL_BACKUP"
        echo -e "${GREEN}Current sysctl configuration backed up to $SYSCTL_BACKUP${NC}"
    fi
}

# Apply Kernel Parameters
apply_kernel_params() {
    echo -e "${YELLOW}Applying optimized kernel parameters...${NC}"
    
    # Create temp file
    local temp_file=$(mktemp)
    
    # Process existing sysctl.conf
    while IFS= read -r line; do
        # Skip existing parameters we want to replace
        local skip_line=false
        for param in "${DEFAULT_KERNEL_PARAMS[@]}" "${VIP_KERNEL_PARAMS[@]}"; do
            key=$(echo "$param" | cut -d= -f1)
            if [[ "$line" == "$key"* ]]; then
                skip_line=true
                break
            fi
        done
        $skip_line || echo "$line" >> "$temp_file"
    done < /etc/sysctl.conf
    
    # Add new parameters
    {
        echo -e "\n# Added by $SCRIPT_NAME"
        # Default parameters
        for param in "${DEFAULT_KERNEL_PARAMS[@]}"; do
            echo "$param"
        done
        
        # VIP parameters if enabled
        if [ "$VIP_MODE" = true ]; then
            echo -e "\n# VIP Optimization Parameters"
            for param in "${VIP_KERNEL_PARAMS[@]}"; do
                echo "$param"
            done
        fi
    } >> "$temp_file"
    
    # Replace sysctl.conf
    mv "$temp_file" /etc/sysctl.conf
    
    # Apply changes
    if ! sysctl -p >/dev/null 2>&1; then
        echo -e "${BOLD_RED}Error applying sysctl settings!${NC}"
        return 1
    fi
    
    # Set MTU to 1420 when applying full optimization (Option 1)
    if [ "$CURRENT_MTU" != "1420" ]; then
        echo -e "${YELLOW}Setting MTU to default 1420...${NC}"
        ifconfig $NETWORK_INTERFACE mtu 1420 2>/dev/null
        CURRENT_MTU=1420
        
        # Make MTU persistent after reboot
        if [[ "$OS" == *"Ubuntu"* || "$OS" == *"Debian"* ]]; then
            local interface_file="/etc/network/interfaces.d/$NETWORK_INTERFACE"
            echo -e "auto $NETWORK_INTERFACE\niface $NETWORK_INTERFACE inet dhcp\n    mtu 1420" > "$interface_file"
        elif [[ "$OS" == *"CentOS"* || "$OS" == *"Red Hat"* || "$OS" == *"Fedora"* ]]; then
            local interface_file="/etc/sysconfig/network-scripts/ifcfg-$NETWORK_INTERFACE"
            if [ -f "$interface_file" ]; then
                if grep -q "MTU=" "$interface_file"; then
                    sed -i "s/MTU=.*/MTU=1420/" "$interface_file"
                else
                    echo "MTU=1420" >> "$interface_file"
                fi
            fi
        else
            if [ ! -f /etc/rc.local ]; then
                echo "#!/bin/bash" > /etc/rc.local
                chmod +x /etc/rc.local
            fi
            sed -i "/ifconfig $NETWORK_INTERFACE mtu/d" /etc/rc.local
            sed -i "/^exit 0/i ifconfig $NETWORK_INTERFACE mtu 1420" /etc/rc.local
        fi
        
        echo -e "${GREEN}MTU set to 1420 and will persist after reboot!${NC}"
    fi
    
    save_config
    echo -e "${GREEN}Kernel parameters applied successfully!${NC}"
    return 0
}

# Verify BBR Status
verify_bbr() {
    echo -e "${YELLOW}Verifying BBR status...${NC}"
    
    local current_congestion=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}' 2>/dev/null)
    local current_qdisc=$(sysctl net.core.default_qdisc | awk '{print $3}' 2>/dev/null)
    
    if [[ -z "$current_congestion" || -z "$current_qdisc" ]]; then
        echo -e "${BOLD_RED}Error: Could not read current network settings!${NC}"
        return 1
    fi
    
    if [[ "$current_congestion" == "$TCP_CONGESTION" && "$current_qdisc" == "fq" ]]; then
        echo -e "${GREEN}BBR is active and properly configured!${NC}"
        echo -e "Congestion control: ${BOLD}$current_congestion${NC}"
        echo -e "Queue discipline: ${BOLD}$current_qdisc${NC}"
        return 0
    else
        echo -e "${BOLD_RED}BBR is not properly configured!${NC}"
        echo -e "Current congestion control: ${BOLD}$current_congestion${NC}"
        echo -e "Current queue discipline: ${BOLD}$current_qdisc${NC}"
        return 1
    fi
}

# Setup Cron Job for Auto Reset
setup_cron_job() {
    local cron_time="0 4 * * *"  # Default: 4 AM daily
    local script_path=$(readlink -f "$0")
    
    echo -e "${YELLOW}Setting up cron job for auto-reset...${NC}"
    echo -e "${CYAN}Current cron time: $cron_time${NC}"
    
    read -p "Do you want to change the schedule? (y/n): " change_schedule
    if [[ "$change_schedule" =~ ^[Yy] ]]; then
        echo -e "\n${YELLOW}Cron schedule format:${NC}"
        echo -e "Minute Hour Day Month DayOfWeek"
        echo -e "Example: 0 4 * * * (runs daily at 4 AM)"
        read -p "Enter new cron schedule: " cron_time
    fi
    
    echo "$cron_time root $script_path --reset > /dev/null 2>&1" > "$CRON_JOB_FILE"
    chmod 644 "$CRON_JOB_FILE"
    
    if [[ $? -ne 0 ]]; then
        echo -e "${BOLD_RED}Error creating cron job!${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Cron job installed at $CRON_JOB_FILE${NC}"
    echo -e "The system will automatically reset network settings at: ${BOLD}$cron_time${NC}"
    return 0
}

# Reset Network Settings
reset_network() {
    echo -e "${YELLOW}Resetting network settings to default...${NC}"
    
    if [[ -f "$SYSCTL_BACKUP" ]]; then
        if ! cp "$SYSCTL_BACKUP" /etc/sysctl.conf; then
            echo -e "${BOLD_RED}Error restoring backup!${NC}"
            return 1
        fi
        
        if ! sysctl -p >/dev/null 2>&1; then
            echo -e "${BOLD_RED}Error applying restored settings!${NC}"
            return 1
        fi
        
        # Reset MTU to default 1500 and remove persistent settings
        ifconfig $NETWORK_INTERFACE mtu 1500 2>/dev/null
        CURRENT_MTU=1500
        
        # Remove persistent MTU settings
        if [[ "$OS" == *"Ubuntu"* || "$OS" == *"Debian"* ]]; then
            rm -f "/etc/network/interfaces.d/$NETWORK_INTERFACE"
        elif [[ "$OS" == *"CentOS"* || "$OS" == *"Red Hat"* || "$OS" == *"Fedora"* ]]; then
            sed -i "/MTU=/d" "/etc/sysconfig/network-scripts/ifcfg-$NETWORK_INTERFACE"
        else
            sed -i "/ifconfig $NETWORK_INTERFACE mtu/d" /etc/rc.local
        fi
        
        # Reset DNS to default
        DNS_SERVERS=("1.1.1.1" "1.0.0.1")
        update_dns
        
        echo -e "${GREEN}Network settings restored from backup!${NC}"
        
        # Restart network service
        restart_network_services
        
        return 0
    else
        echo -e "${BOLD_RED}No backup found! Cannot reset network settings.${NC}"
        return 1
    fi
}

# Restart Network Services
restart_network_services() {
    echo -e "${YELLOW}Restarting network services...${NC}"
    
    case $OS in
        *Ubuntu*|*Debian*)
            systemctl restart networking 2>/dev/null || service networking restart 2>/dev/null
            ;;
        *CentOS*|*Red*Hat*|*Fedora*)
            systemctl restart network 2>/dev/null || service network restart 2>/dev/null
            ;;
        *Arch*)
            systemctl restart systemd-networkd 2>/dev/null
            ;;
        *)
            echo -e "${YELLOW}Unknown OS! Please restart network manually.${NC}"
            return 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Network services restarted successfully.${NC}"
    else
        echo -e "${BOLD_RED}Could not restart network services. You may need to reboot.${NC}"
        return 1
    fi
}

# Configure VIP Settings
configure_vip() {
    echo -e "\n${YELLOW}Configuring VIP Optimization${NC}"
    
    read -p "Enable VIP Mode? (y/n): " choice
    if [[ "$choice" =~ ^[Yy] ]]; then
        VIP_MODE=true
        
        read -p "Enter VIP Subnet (e.g., 10.0.0.0/24): " VIP_SUBNET
        read -p "Enter VIP Gateway (e.g., 10.0.0.1): " VIP_GATEWAY
        
        echo -e "${GREEN}VIP Mode enabled with Subnet: $VIP_SUBNET, Gateway: $VIP_GATEWAY${NC}"
    else
        VIP_MODE=false
        VIP_SUBNET=""
        VIP_GATEWAY=""
        echo -e "${YELLOW}VIP Mode disabled${NC}"
    fi
    
    save_config
}

# Configure MTU - Improved Version with Persistent Settings
configure_mtu() {
    echo -e "\n${YELLOW}Configuring Network Interface MTU${NC}"
    
    echo -e "Current MTU: ${BOLD}$CURRENT_MTU${NC}"
    read -p "Do you want to change MTU? (y/n): " change_mtu
    
    if [[ "$change_mtu" =~ ^[Yy] ]]; then
        read -p "Enter new MTU value (recommended: 1420): " new_mtu
        
        if ! [[ "$new_mtu" =~ ^[0-9]+$ ]]; then
            echo -e "${BOLD_RED}Error: MTU must be a number!${NC}"
            return 1
        fi
        
        # Apply MTU immediately
        if ! ifconfig $NETWORK_INTERFACE mtu $new_mtu 2>/dev/null; then
            echo -e "${BOLD_RED}Error setting MTU!${NC}"
            return 1
        fi
        
        # Make MTU persistent after reboot
        if [[ "$OS" == *"Ubuntu"* || "$OS" == *"Debian"* ]]; then
            # For Debian/Ubuntu systems
            local interface_file="/etc/network/interfaces.d/$NETWORK_INTERFACE"
            echo -e "auto $NETWORK_INTERFACE\niface $NETWORK_INTERFACE inet dhcp\n    mtu $new_mtu" > "$interface_file"
            echo -e "${GREEN}Persistent MTU configuration saved to $interface_file${NC}"
            
        elif [[ "$OS" == *"CentOS"* || "$OS" == *"Red Hat"* || "$OS" == *"Fedora"* ]]; then
            # For RHEL/CentOS systems
            local interface_file="/etc/sysconfig/network-scripts/ifcfg-$NETWORK_INTERFACE"
            if [ -f "$interface_file" ]; then
                if grep -q "MTU=" "$interface_file"; then
                    sed -i "s/MTU=.*/MTU=$new_mtu/" "$interface_file"
                else
                    echo "MTU=$new_mtu" >> "$interface_file"
                fi
                echo -e "${GREEN}Persistent MTU configuration saved to $interface_file${NC}"
            else
                echo -e "${YELLOW}Could not find network interface config file. Creating one...${NC}"
                echo -e "DEVICE=$NETWORK_INTERFACE\nTYPE=Ethernet\nONBOOT=yes\nMTU=$new_mtu" > "$interface_file"
            fi
            
        else
            # For other systems, use rc.local
            if [ ! -f /etc/rc.local ]; then
                echo "#!/bin/bash" > /etc/rc.local
                chmod +x /etc/rc.local
            fi
            
            # Remove existing MTU command if any
            sed -i "/ifconfig $NETWORK_INTERFACE mtu/d" /etc/rc.local
            # Add new MTU command before 'exit 0'
            sed -i "/^exit 0/i ifconfig $NETWORK_INTERFACE mtu $new_mtu" /etc/rc.local
            echo -e "${GREEN}Persistent MTU configuration added to /etc/rc.local${NC}"
        fi
        
        CURRENT_MTU=$new_mtu
        echo -e "${GREEN}MTU successfully changed to $new_mtu and will persist after reboot!${NC}"
        
        save_config
    fi
}

# Configure DNS - Improved Version
configure_dns() {
    echo -e "\n${YELLOW}Configuring DNS Servers${NC}"
    
    echo -e "Current DNS: ${BOLD}$CURRENT_DNS${NC}"
    echo -e "\n${CYAN}Popular DNS Options:${NC}"
    echo -e "1) Cloudflare (1.1.1.1, 1.0.0.1) [Recommended]"
    echo -e "2) Google (8.8.8.8, 8.8.4.4)"
    echo -e "3) OpenDNS (208.67.222.222, 208.67.220.220)"
    echo -e "4) Quad9 (9.9.9.9, 149.112.112.112)"
    echo -e "5) Shecan (178.22.122.100, 185.51.200.2) - Iran"
    echo -e "6) Electro (78.157.42.100, 78.157.42.101) - Iran"
    echo -e "7) Custom DNS"
    
    read -p "Select an option [1-7]: " dns_choice
    
    case $dns_choice in
        1)
            DNS_SERVERS=("1.1.1.1" "1.0.0.1")
            ;;
        2)
            DNS_SERVERS=("8.8.8.8" "8.8.4.4")
            ;;
        3)
            DNS_SERVERS=("208.67.222.222" "208.67.220.220")
            ;;
        4)
            DNS_SERVERS=("9.9.9.9" "149.112.112.112")
            ;;
        5)
            DNS_SERVERS=("178.22.122.100" "185.51.200.2")
            ;;
        6)
            DNS_SERVERS=("78.157.42.100" "78.157.42.101")
            ;;
        7)
            echo -e "\n${YELLOW}Enter custom DNS servers (space separated, max 3)${NC}"
            echo -e "Example: 1.1.1.1 8.8.8.8 9.9.9.9"
            read -p "New DNS servers: " new_dns
            
            # Validate IP addresses
            local valid_dns=()
            for dns in $new_dns; do
                if [[ "$dns" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    valid_dns+=("$dns")
                else
                    echo -e "${BOLD_RED}Error: $dns is not a valid IP address!${NC}"
                    return 1
                fi
            done
            
            if [ ${#valid_dns[@]} -eq 0 ]; then
                echo -e "${BOLD_RED}Error: No valid DNS servers provided!${NC}"
                return 1
            fi
            
            DNS_SERVERS=("${valid_dns[@]}")
            ;;
        *)
            echo -e "${BOLD_RED}Invalid option! Keeping current DNS.${NC}"
            return 1
            ;;
    esac
    
    update_dns
    save_config
}

# Save Configuration
save_config() {
    echo -e "${YELLOW}Saving configuration to $CONFIG_FILE...${NC}"
    
    cat > "$CONFIG_FILE" <<EOL
# BBR VIP Optimizer Configuration
ENABLE_BBR=$ENABLE_BBR
ENABLE_FASTOPEN=$ENABLE_FASTOPEN
TCP_CONGESTION="$TCP_CONGESTION"
TCP_FASTOPEN=$TCP_FASTOPEN
VIP_MODE=$VIP_MODE
VIP_SUBNET="$VIP_SUBNET"
VIP_GATEWAY="$VIP_GATEWAY"
MTU=$CURRENT_MTU
DNS_SERVERS=(${DNS_SERVERS[@]})
EOL

    echo -e "${GREEN}Configuration saved successfully!${NC}"
}

# Test Network Speed
test_speed() {
    echo -e "\n${YELLOW}Running network speed test...${NC}"
    
    if ! command -v speedtest-cli &> /dev/null; then
        echo -e "${YELLOW}Installing speedtest-cli...${NC}"
        if pip install speedtest-cli 2>/dev/null || apt-get install -y speedtest-cli 2>/dev/null || \
           yum install -y speedtest-cli 2>/dev/null || dnf install -y speedtest-cli 2>/dev/null; then
            echo -e "${GREEN}speedtest-cli installed successfully!${NC}"
        else
            echo -e "${BOLD_RED}Could not install speedtest-cli. Please install it manually.${NC}"
            return 1
        fi
    fi
    
    echo -e "${CYAN}Testing download and upload speed...${NC}"
    speedtest-cli --simple
    
    echo -e "\n${CYAN}Testing latency to 1.1.1.1...${NC}"
    ping -c 5 1.1.1.1 | grep -A1 "statistics"
}

# Show Current Settings
show_settings() {
    echo -e "\n${YELLOW}Current Configuration:${NC}"
    echo -e "BBR Enabled: ${BOLD}$ENABLE_BBR${NC}"
    echo -e "TCP Fast Open: ${BOLD}$TCP_FASTOPEN${NC}"
    echo -e "VIP Mode: ${BOLD}$VIP_MODE${NC}"
    echo -e "MTU: ${BOLD}$CURRENT_MTU${NC}"
    echo -e "DNS Servers: ${BOLD}${DNS_SERVERS[@]}${NC}"
    
    if [ "$VIP_MODE" = true ]; then
        echo -e "VIP Subnet: ${BOLD}$VIP_SUBNET${NC}"
        echo -e "VIP Gateway: ${BOLD}$VIP_GATEWAY${NC}"
    fi
    
    echo -e "\n${YELLOW}Current Kernel Parameters:${NC}"
    sysctl -a 2>/dev/null | grep -E "net.core.default_qdisc|net.ipv4.tcp_congestion_control|net.ipv4.tcp_fastopen"
    
    echo -e "\n${YELLOW}Interface Settings:${NC}"
    echo -e "Current Interface MTU: ${BOLD}$(cat /sys/class/net/$NETWORK_INTERFACE/mtu 2>/dev/null)${NC}"
}

# Uninstall All Changes
uninstall_all() {
    echo -e "\n${BOLD_RED}Uninstalling all changes...${NC}"
    
    # Restore original sysctl settings
    if [[ -f "$SYSCTL_BACKUP" ]]; then
        cp "$SYSCTL_BACKUP" /etc/sysctl.conf
        sysctl -p
        echo -e "${GREEN}Restored original sysctl settings${NC}"
    fi
    
    # Remove configuration files
    rm -f "$CONFIG_FILE"
    echo -e "${GREEN}Removed configuration file${NC}"
    
    # Remove cron job
    rm -f "$CRON_JOB_FILE"
    echo -e "${GREEN}Removed cron job${NC}"
    
    # Reset MTU to default 1500 and remove persistent settings
    ifconfig $NETWORK_INTERFACE mtu 1500 2>/dev/null
    if [[ "$OS" == *"Ubuntu"* || "$OS" == *"Debian"* ]]; then
        rm -f "/etc/network/interfaces.d/$NETWORK_INTERFACE"
    elif [[ "$OS" == *"CentOS"* || "$OS" == *"Red Hat"* || "$OS" == *"Fedora"* ]]; then
        sed -i "/MTU=/d" "/etc/sysconfig/network-scripts/ifcfg-$NETWORK_INTERFACE"
    else
        sed -i "/ifconfig $NETWORK_INTERFACE mtu/d" /etc/rc.local
    fi
    echo -e "${GREEN}Reset MTU to default 1500 and removed persistent settings${NC}"
    
    # Reset DNS to Cloudflare DNS and make resolv.conf mutable
    if [ -f /etc/resolv.conf ]; then
        chattr -i /etc/resolv.conf 2>/dev/null
    fi
    echo "nameserver 1.1.1.1" > /etc/resolv.conf
    echo "nameserver 1.0.0.1" >> /etc/resolv.conf
    echo -e "${GREEN}Reset DNS to Cloudflare DNS${NC}"
    
    echo -e "\n${GREEN}Uninstallation complete!${NC}"
    read -p "Press [Enter] to continue..."
}

# Main Menu
show_menu() {
    while true; do
        show_header
        echo -e "\n${BOLD}Main Menu:${NC}"
        echo -e "${CYAN}1) Apply Full Optimization${NC}"
        echo -e "${CYAN}3) Reset Network Settings${NC}"
        echo -e "${CYAN}4) Install Auto-Reset Cron Job${NC}"
        echo -e "${PURPLE}6) Configure VIP Settings${NC}"
        echo -e "${PURPLE}7) Configure MTU${NC}"
        echo -e "${PURPLE}8) Configure DNS${NC}"
        echo -e "${GREEN}9) Show Current Settings${NC}"
        echo -e "${GREEN}10) Test Network Speed${NC}"
        echo -e "${BLUE}12) Save Configuration${NC}"
        echo -e "${RED}13) Reboot Server${NC}"
        echo -e "${BOLD_RED}14) Uninstall (Remove All Changes)${NC}"
        echo -e "${BOLD_RED}15) Exit${NC}"
        
        read -p "Please enter your choice [1-15]: " choice
        
        case $choice in
            1)
                backup_sysctl
                apply_kernel_params
                verify_bbr
                ;;
            3)
                reset_network
                ;;
            4)
                setup_cron_job
                ;;
            6)
                configure_vip
                ;;
            7)
                configure_mtu
                ;;
            8)
                configure_dns
                ;;
            9)
                show_settings
                ;;
            10)
                test_speed
                ;;
            12)
                save_config
                ;;
            13)
                echo -e "${YELLOW}Preparing to reboot server...${NC}"
                save_config
                echo -e "${RED}Server will now reboot...${NC}"
                sleep 3
                reboot
                ;;
            14)
                uninstall_all
                ;;
            15)
                echo -e "${GREEN}Exiting...${NC}"
                exit 0
                ;;
            *)
                echo -e "${BOLD_RED}Invalid option!${NC}"
                ;;
        esac
        
        read -p "Press [Enter] to return to main menu..."
    done
}

# Main Execution
main() {
    check_root
    detect_distro
    load_config
    show_menu
}

# Handle command line arguments
case "$1" in
    "--reset")
        reset_network
        exit $?
        ;;
    *)
        main
        ;;
esac
