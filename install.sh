#!/bin/bash
# BBR VIP Optimizer Pro - Final Fixed Version
# All original features preserved - Only DNS and MTU issues fixed

SCRIPT_NAME="BBR VIP Optimizer Pro"
SCRIPT_VERSION="5.0"
AUTHOR="Parham Pahlevan"
CONFIG_FILE="/etc/bbr_vip.conf"
LOG_FILE="/var/log/bbr_vip.log"
SYSCTL_BACKUP="/etc/sysctl.conf.bak"

# Network Configuration
PREFERRED_INTERFACES=("ens160" "eth0")
NETWORK_INTERFACE=""
ALL_INTERFACES=()
VIP_MODE=false
VIP_SUBNET=""
VIP_GATEWAY=""
DEFAULT_MTU=1420
CURRENT_MTU=""
DNS_SERVERS=("1.1.1.1" "8.8.8.8")
CURRENT_DNS=""

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# ========== Core Fixes ========== #

# Improved DNS Configuration with Rollback
set_dns_persistent() {
    local dns_servers=("$@")
    
    # 1. Create backup
    cp /etc/resolv.conf /etc/resolv.conf.bak 2>/dev/null
    
    # 2. Disable interfering services
    systemctl stop systemd-resolved 2>/dev/null
    systemctl disable systemd-resolved 2>/dev/null
    
    # 3. Remove symlink if exists
    if [ -L /etc/resolv.conf ]; then
        rm -f /etc/resolv.conf
        touch /etc/resolv.conf
    fi
    
    # 4. Apply new DNS
    echo "# Generated by $SCRIPT_NAME" > /etc/resolv.conf
    for dns in "${dns_servers[@]}"; do
        echo "nameserver $dns" >> /etc/resolv.conf
    done
    
    # 5. Make file immutable
    chattr +i /etc/resolv.conf 2>/dev/null
    
    # 6. For NetworkManager systems
    if command -v nmcli &>/dev/null; then
        for conn in $(nmcli -t -f NAME con show); do
            nmcli con mod "$conn" ipv4.dns "$(echo "${dns_servers[@]}" | tr ' ' ',')"
            nmcli con mod "$conn" ipv4.ignore-auto-dns yes
            nmcli con up "$conn"
        done
    fi
    
    # 7. Verify network connectivity
    if ! ping -c2 8.8.8.8 &>/dev/null; then
        echo -e "${RED}Network connection failed! Restoring DNS...${NC}"
        cp /etc/resolv.conf.bak /etc/resolv.conf
        chattr -i /etc/resolv.conf 2>/dev/null
        return 1
    fi
    
    echo -e "${GREEN}DNS configured successfully!${NC}"
}

# Improved MTU Configuration
set_mtu_persistent() {
    local interface=$1
    local mtu=$2
    
    # 1. Temporary change
    ip link set dev "$interface" mtu "$mtu"
    
    # 2. Persistent changes for different systems
    if [ -f /etc/network/interfaces ]; then
        # ifupdown systems
        sed -i "/iface $interface inet/,/^$/ { /mtu /d }" /etc/network/interfaces
        sed -i "/iface $interface inet/a\    mtu $mtu" /etc/network/interfaces
    elif command -v nmcli &>/dev/null; then
        # NetworkManager systems
        nmcli con mod "$(nmcli -t -f DEVICE,NAME con show | grep "$interface" | cut -d: -f2)" 802-3-ethernet.mtu "$mtu"
    elif [ -d /etc/netplan ]; then
        # netplan systems
        for yaml in /etc/netplan/*.yaml; do
            sed -i "/$interface:/,/^ *[^ ]/ { /mtu:/d }" "$yaml"
            sed -i "/$interface:/a\      mtu: $mtu" "$yaml"
            netplan apply
        done
    fi
    
    echo -e "${GREEN}MTU $mtu set on interface $interface${NC}"
}

# ========== Original BBR Functions (Unchanged) ========== #

enable_bbr() {
    echo -e "${YELLOW}Enabling BBR...${NC}"
    
    # Backup current sysctl settings
    if [ ! -f "$SYSCTL_BACKUP" ]; then
        cp /etc/sysctl.conf "$SYSCTL_BACKUP"
    fi
    
    # Apply BBR settings
    {
        echo "net.core.default_qdisc=fq"
        echo "net.ipv4.tcp_congestion_control=bbr"
        echo "net.ipv4.tcp_fastopen=3"
        echo "net.ipv4.tcp_syncookies=1"
        echo "net.ipv4.tcp_tw_reuse=1"
        echo "net.ipv4.tcp_fin_timeout=30"
        echo "net.ipv4.tcp_keepalive_time=1200"
        echo "net.ipv4.ip_local_port_range=1024 65000"
        echo "net.ipv4.tcp_max_syn_backlog=8192"
        echo "net.ipv4.tcp_max_tw_buckets=5000"
        echo "net.core.somaxconn=65535"
    } > /etc/sysctl.d/60-bbr.conf
    
    sysctl -p /etc/sysctl.d/60-bbr.conf >/dev/null 2>&1
    
    # Enable BBR on all interfaces
    for iface in "${ALL_INTERFACES[@]}"; do
        tc qdisc replace dev "$iface" root fq
    done
    
    echo -e "${GREEN}BBR enabled successfully!${NC}"
}

verify_bbr() {
    echo -e "${YELLOW}Verifying BBR status...${NC}"
    
    local congestion=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')
    local qdisc=$(sysctl net.core.default_qdisc | awk '{print $3}')
    
    if [[ "$congestion" == "bbr" && "$qdisc" == "fq" ]]; then
        echo -e "${GREEN}BBR is active!${NC}"
        echo -e "Congestion control: ${BOLD}$congestion${NC}"
        echo -e "Queue discipline: ${BOLD}$qdisc${NC}"
        return 0
    else
        echo -e "${RED}BBR is not active!${NC}"
        echo -e "Current congestion control: ${BOLD}$congestion${NC}"
        echo -e "Current queue discipline: ${BOLD}$qdisc${NC}"
        return 1
    fi
}

# ========== Main Menu (Fully Preserved) ========== #

show_menu() {
    while true; do
        clear
        echo -e "${BLUE}${BOLD}$SCRIPT_NAME $SCRIPT_VERSION${NC}"
        echo -e "${YELLOW}Main Menu:${NC}"
        echo -e "1) Enable Full Optimization (BBR + Network Settings)"
        echo -e "2) Configure DNS Manually"
        echo -e "3) Configure Interface MTU"
        echo -e "4) Verify BBR Status"
        echo -e "5) VIP Settings"
        echo -e "6) Restore Network Settings"
        echo -e "7) Exit"
        
        read -p "Please select an option: " choice
        
        case $choice in
            1)
                enable_bbr
                configure_dns
                configure_mtu
                ;;
            2)
                configure_dns
                ;;
            3)
                configure_mtu
                ;;
            4)
                verify_bbr
                ;;
            5)
                configure_vip
                ;;
            6)
                restore_network
                ;;
            7)
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                ;;
        esac
        
        read -p "Press Enter to continue..."
    done
}

# ========== Other Original Functions (Unchanged) ========== #

configure_dns() {
    echo -e "\n${YELLOW}Configure DNS Servers${NC}"
    echo -e "Current DNS: ${BOLD}$CURRENT_DNS${NC}"
    read -p "Do you want to change DNS? (y/n): " change_dns
    
    if [[ "$change_dns" =~ ^[Yy] ]]; then
        echo -e "\n${YELLOW}Enter DNS servers (space separated)${NC}"
        echo -e "Example: 1.1.1.1 8.8.8.8"
        read -p "New DNS: " new_dns
        
        # Validate and set DNS
        valid_dns=()
        for dns in $new_dns; do
            if [[ "$dns" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                valid_dns+=("$dns")
            else
                echo -e "${RED}Error: $dns is not a valid IP!${NC}"
                return 1
            fi
        done
        
        set_dns_persistent "${valid_dns[@]}"
    fi
}

configure_mtu() {
    echo -e "\n${YELLOW}Configure Interface MTU${NC}"
    echo -e "Available interfaces: ${ALL_INTERFACES[*]}"
    read -p "Interface name (blank for all): " target_iface
    
    if [ -z "$target_iface" ]; then
        target_iface="${ALL_INTERFACES[*]}"
    fi
    
    echo -e "Current MTU: ${BOLD}$CURRENT_MTU${NC}"
    read -p "Change MTU? (y/n): " change_mtu
    
    if [[ "$change_mtu" =~ ^[Yy] ]]; then
        read -p "New MTU value (suggested: 1420): " new_mtu
        
        if ! [[ "$new_mtu" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Error: MTU must be a number!${NC}"
            return 1
        fi
        
        for iface in $target_iface; do
            if [[ " ${ALL_INTERFACES[*]} " =~ " ${iface} " ]]; then
                set_mtu_persistent "$iface" "$new_mtu"
            else
                echo -e "${RED}Interface $iface not found!${NC}"
            fi
        done
    fi
}

# [All other original functions remain unchanged...]

# Script Startup
check_root
detect_interfaces
show_menu
